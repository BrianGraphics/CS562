#version 460

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (rgba8  , binding = 0)   uniform readonly  image2D src;
layout (rgba32f, binding = 1) uniform writeonly image2D dst;

float pi = 3.14159265359;

float GetBasis(int index, float theta, float phi);
float EvalSH(vec3 N, int index);

void main()
{        
    ivec2 src_size = imageSize(src);

    float w = float(src_size.x);
    float h = float(src_size.y);


    float delta_theta = pi / h;
    float delta_phi   = 2.0 * pi / w;

    vec4 sum[9];
    for(int i = 0; i < w; i++) {
        for(int j = 0; j < h; j++) {
            vec4 L = imageLoad(src, ivec2(i, j));            
            L  = pow(L,  vec4(2.2));

            float theta = pi * (float(j) + 0.5) / h;
            float phi   = 2.0 * pi * (float(i) + 0.5) / w;

            for(int index = 0; index < 9; ++index) {
                sum[index] += L * GetBasis(index, theta, phi) * sin(theta) * delta_theta * delta_phi;
            }
        }
    }

    for(int index = 0; index < 9; ++index) {        
        imageStore(dst, ivec2(index, 0), vec4(sum[index].xyz, 1.0));
    }       
}

float GetBasis(int index, float theta, float phi) {                 
    float Y0   = 0.28209479177f; // Y0
    float Y1   = 0.4886025119f;  // Y1
    float Y2   = 1.09254843059f; // Y2_2, Y2_1, Y21
    float Y20  = 0.31539156525f; // Y20
    float Y22  = 0.54627421529f; // Y22

    float sinTheta = sin(theta);
    vec3 N = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cos(theta));
    N = normalize(N);

    switch (index) {
        case 0:
            return Y0;            
        case 1:
            return -Y1 * N.y;
        case 2:
            return Y1 * N.z;
        case 3:
            return -Y1 * N.x;
        case 4:
            return Y2 * N.x * N.y;
        case 5:
            return -Y2 * N.y * N.z;
        case 6:
            return Y20 * (3.0 * N.z * N.z - 1.0);
        case 7:
            return -Y2 * N.x * N.z;
        case 8:
            return Y22 * (N.x * N.x - N.y * N.y);
    }

    // shouldn't get here
    return 0.0;
}